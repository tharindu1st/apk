{
	"info": {
		"_postman_id": "5e2ffa62-61b8-4dba-8e2a-4ffd29db22a5",
		"name": "Test Admin API Operations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16040063"
	},
	"item": [
		{
			"name": "AdminAPI Create Application Rate Plan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Assert Internal BackOffice API creation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    //Usually come as false and need to assert in future",
							"    //pm.expect(responseJson.isDeployed).equals(pm.collectionVariables.get('idTest1'));",
							"    pm.expect(responseJson.description).equals(pm.collectionVariables.get('applicationRatePlanDescription'));",
							"    pm.expect(responseJson.displayName).equals(pm.collectionVariables.get('applicationRatePlanDisplayName'));",
							"    pm.expect(responseJson.planName).equals(pm.collectionVariables.get('applicationRatePlanName'));",
							"    //ID is autogenerated hence skipped asseting",
							"    // pm.expect(responseJson.policyId).equals(pm.collectionVariables.get('contextTest1'));",
							"    pm.collectionVariables.set(\"applicationRatePlanID\",responseJson.planId)",
							"",
							"    pm.expect(responseJson.defaultLimit.type).equals(pm.collectionVariables.get('applicationRatePlanType'));",
							"    pm.expect(responseJson.defaultLimit.requestCount.requestCount).to.eql(parseInt(pm.collectionVariables.get('applicationRatePlanRequestCount')));",
							"    pm.expect(responseJson.defaultLimit.requestCount.timeUnit).equals(pm.collectionVariables.get('applicationRatePlanTimeUnit'));",
							"    pm.expect(responseJson.defaultLimit.requestCount.unitTime).equals(parseInt(pm.collectionVariables.get('applicationRatePlanTime')));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"planName\": \"{{applicationRatePlanName}}\",\n  \"displayName\": \"{{applicationRatePlanDisplayName}}\",\n  \"description\": \"{{applicationRatePlanDescription}}\",\n  \"defaultLimit\": {\n    \"type\": \"{{applicationRatePlanType}}\",\n    \"requestCount\": {\n      \"requestCount\": {{applicationRatePlanRequestCount}},\n      \"timeUnit\": \"{{applicationRatePlanTimeUnit}}\",\n      \"unitTime\": {{applicationRatePlanTime}}\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{adminAPIServerBaseURL}}/api/am/admin/application-rate-plans",
					"host": [
						"{{adminAPIServerBaseURL}}"
					],
					"path": [
						"api",
						"am",
						"admin",
						"application-rate-plans"
					]
				}
			},
			"response": []
		},
		{
			"name": "AdminAPI Get Application Rate Plan By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Assert Internal BackOfficeAPI get application rate plan by ID response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    //Usually come as false and need to assert in future",
							"    //pm.expect(responseJson.isDeployed).equals(pm.collectionVariables.get('idTest1'));",
							"    pm.expect(responseJson.description).equals(pm.collectionVariables.get('applicationRatePlanDescription'));",
							"    //pm.expect(responseJson.displayName).equals(pm.collectionVariables.get('applicationRatePlanDisplayName'));",
							"    pm.expect(responseJson.planName).equals(pm.collectionVariables.get('applicationRatePlanName'));",
							"    pm.expect(responseJson.type).equals(pm.collectionVariables.get('applicationRatePlanType'));",
							"    pm.expect(responseJson.requestcount).equals(parseInt(pm.collectionVariables.get('applicationRatePlanRequestCount')));",
							"    pm.expect(responseJson.timeunit).equals(pm.collectionVariables.get('applicationRatePlanTimeUnit'));",
							"    pm.expect(responseJson.unittime).equals(parseInt(pm.collectionVariables.get('applicationRatePlanTime')));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{adminAPIServerBaseURL}}/api/am/admin/application-rate-plans/{{applicationRatePlanID}}",
					"host": [
						"{{adminAPIServerBaseURL}}"
					],
					"path": [
						"api",
						"am",
						"admin",
						"application-rate-plans",
						"{{applicationRatePlanID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "AdminAPI Application Rate Plan Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Assert Internal BackOffice API creation response\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    //Usually come as false and need to assert in future",
							"    //pm.expect(responseJson.isDeployed).equals(pm.collectionVariables.get('idTest1'));",
							"    pm.expect(responseJson.description).equals(pm.collectionVariables.get('applicationRatePlanDescription2'));",
							"    pm.expect(responseJson.displayName).equals(pm.collectionVariables.get('applicationRatePlanDisplayName2'));",
							"    pm.expect(responseJson.planName).equals(pm.collectionVariables.get('applicationRatePlanName2'));",
							"    //ID is autogenerated hence skipped asseting",
							"",
							"    pm.expect(responseJson.defaultLimit.type).equals(pm.collectionVariables.get('applicationRatePlanType2'));",
							"    pm.expect(responseJson.defaultLimit.requestCount.requestCount).to.eql(parseInt(pm.collectionVariables.get('applicationRatePlanRequestCount2')));",
							"    pm.expect(responseJson.defaultLimit.requestCount.timeUnit).equals(pm.collectionVariables.get('applicationRatePlanTimeUnit2'));",
							"    pm.expect(responseJson.defaultLimit.requestCount.unitTime).equals(parseInt(pm.collectionVariables.get('applicationRatePlanTime2')));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"planName\": \"{{applicationRatePlanName2}}\",\n  \"displayName\": \"{{applicationRatePlanDisplayName2}}\",\n  \"description\": \"{{applicationRatePlanDescription2}}\",\n  \"defaultLimit\": {\n    \"type\": \"{{applicationRatePlanType2}}\",\n    \"requestCount\": {\n      \"requestCount\": {{applicationRatePlanRequestCount2}},\n      \"timeUnit\": \"{{applicationRatePlanTimeUnit2}}\",\n      \"unitTime\": {{applicationRatePlanTime2}}\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/am/admin/application-rate-plans/{{applicationRatePlanID}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"am",
						"admin",
						"application-rate-plans",
						"{{applicationRatePlanID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "AdminAPI List Application Rate Plans",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{adminAPIServerBaseURL}}/api/am/admin/application-rate-plans",
					"host": [
						"{{adminAPIServerBaseURL}}"
					],
					"path": [
						"api",
						"am",
						"admin",
						"application-rate-plans"
					]
				}
			},
			"response": []
		},
		{
			"name": "AdminAPI Application Rate Plan Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"policyName\": \"30PerMin\",\n  \"displayName\": \"30PerMin\",\n  \"description\": \"30 Per Min\",\n  \"type\": \"ApplicationThrottlePolicy\",\n  \"defaultLimit\": {\n    \"type\": \"REQUESTCOUNTLIMIT\",\n    \"requestCount\": {\n      \"requestCount\": 10,\n      \"timeUnit\": \"min\",\n      \"unitTime\": 1\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{adminAPIServerBaseURL}}/api/am/admin/application-rate-plans/{{applicationRatePlanID}}",
					"host": [
						"{{adminAPIServerBaseURL}}"
					],
					"path": [
						"api",
						"am",
						"admin",
						"application-rate-plans",
						"{{applicationRatePlanID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "AdminAPI Deny Policy Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Assert AdminAPI Deny Policy creation response\", () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.conditionType).equals(pm.collectionVariables.get('denyPolicyConditionTypeApplication'));",
							"    pm.expect(responseJson.conditionValue).equals(pm.collectionVariables.get('denyPolicyConditionValueApplication'));",
							"    pm.expect(responseJson.conditionStatus).equals(Boolean(pm.collectionVariables.get('denyPolicyConditionStateApplication')));",
							"    pm.collectionVariables.set(\"applicationDenyPolicyID\",responseJson.policyId)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"conditionType\": \"{{denyPolicyConditionTypeApplication}}\",\n  \"conditionValue\": \"{{denyPolicyConditionValueApplication}}\",\n  \"conditionStatus\": {{denyPolicyConditionStateApplication}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{adminAPIServerBaseURL}}/api/am/admin/deny-policies",
					"host": [
						"{{adminAPIServerBaseURL}}"
					],
					"path": [
						"api",
						"am",
						"admin",
						"deny-policies"
					]
				}
			},
			"response": []
		},
		{
			"name": "AdminAPI Deny Policy Get Policy By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Assert AdminAPI Deny Policy creation response\", () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.conditionType).equals(pm.collectionVariables.get('denyPolicyConditionTypeApplication'));",
							"    pm.expect(responseJson.conditionValue).equals(pm.collectionVariables.get('denyPolicyConditionValueApplication'));",
							"    pm.expect(responseJson.conditionStatus).equals(Boolean(pm.collectionVariables.get('denyPolicyConditionStateApplication')));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{adminAPIServerBaseURL}}/api/am/admin/deny-policies/{{applicationDenyPolicyID}}",
					"host": [
						"{{adminAPIServerBaseURL}}"
					],
					"path": [
						"api",
						"am",
						"admin",
						"deny-policies",
						"{{applicationDenyPolicyID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "AdminAPI List  Deny Policy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check Deny Policies list return from get deny policy list API call\", () => {",
							"    //parse the response JSON and test three properties",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.list.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{adminAPIServerBaseURL}}/api/am/admin/deny-policies",
					"host": [
						"{{adminAPIServerBaseURL}}"
					],
					"path": [
						"api",
						"am",
						"admin",
						"deny-policies"
					]
				}
			},
			"response": []
		},
		{
			"name": "AdminAPI Deny Policy Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"policyName\": \"30PerMin\",\n  \"displayName\": \"30PerMin\",\n  \"description\": \"30 Per Min\",\n  \"type\": \"ApplicationThrottlePolicy\",\n  \"defaultLimit\": {\n    \"type\": \"REQUESTCOUNTLIMIT\",\n    \"requestCount\": {\n      \"requestCount\": 10,\n      \"timeUnit\": \"min\",\n      \"unitTime\": 1\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{adminAPIServerBaseURL}}/api/am/admin/deny-policies/{{applicationDenyPolicyID}}",
					"host": [
						"{{adminAPIServerBaseURL}}"
					],
					"path": [
						"api",
						"am",
						"admin",
						"deny-policies",
						"{{applicationDenyPolicyID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "AdminAPI Deny Policy Update",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"conditionStatus\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:80/api/am/admin/deny-policy/01ed8031-d397-1148-b77f-7fd643946985",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "80",
					"path": [
						"api",
						"am",
						"admin",
						"deny-policy",
						"01ed8031-d397-1148-b77f-7fd643946985"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "applicationRatePlanName",
			"value": "95PerMinPlan",
			"type": "string"
		},
		{
			"key": "applicationRatePlanDisplayName",
			"value": "95 Requests per Minutes",
			"type": "string"
		},
		{
			"key": "applicationRatePlanDescription",
			"value": "95 Requests per Minutes",
			"type": "string"
		},
		{
			"key": "applicationRatePlanType",
			"value": "ApplicationThrottlePolicy",
			"type": "string"
		},
		{
			"key": "applicationRatePlanRequestCount",
			"value": "95",
			"type": "string"
		},
		{
			"key": "applicationRatePlanTimeUnit",
			"value": "min",
			"type": "string"
		},
		{
			"key": "applicationRatePlanTime",
			"value": "1",
			"type": "string"
		},
		{
			"key": "applicationRatePlanID",
			"value": "",
			"type": "string"
		},
		{
			"key": "applicationRatePlanName2",
			"value": "93PerMinPlan",
			"type": "string"
		},
		{
			"key": "applicationRatePlanDisplayName2",
			"value": "93 Requests per Minutes",
			"type": "string"
		},
		{
			"key": "applicationRatePlanDescription2",
			"value": "93 Requests per Minutes",
			"type": "string"
		},
		{
			"key": "applicationRatePlanType2",
			"value": "ApplicationThrottlePolicy",
			"type": "string"
		},
		{
			"key": "applicationRatePlanRequestCount2",
			"value": "93",
			"type": "string"
		},
		{
			"key": "applicationRatePlanTimeUnit2",
			"value": "min",
			"type": "string"
		},
		{
			"key": "applicationRatePlanTime2",
			"value": "15",
			"type": "string"
		},
		{
			"key": "denyPolicyConditionTypeApplication",
			"value": "APPLICATION",
			"type": "string"
		},
		{
			"key": "denyPolicyConditionValueApplication",
			"value": "admin:MyApp3",
			"type": "string"
		},
		{
			"key": "denyPolicyConditionStateApplication",
			"value": "true",
			"type": "string"
		},
		{
			"key": "applicationDenyPolicyID",
			"value": "",
			"type": "string"
		}
	]
}